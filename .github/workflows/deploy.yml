name: Deployment (Container)
on:
  push:
    branches:
      - master
      - main
      - dev
      - se-service-container-in-runner
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
    # Dockerイメージを使ってjobを動かすための設定。
    ## container: XXX で定義したものは、あくまでjobをこのコンテナ内で実行するといったもの。
    ## ※下に記述した、services: XXX　は、このjob上でコンテナを実行するといったこと。
    # container:
    #   image: node:16
    #   # containerのセットアップとして必要なenvはここに書く。
    #   env:
    #     hello: world
    # あくまで、steps側で使いたいenvは今まで通りこっち側で書く。
    env:
      # MONGODB_CONNECTION_PROTOCOL: mongodb+srv
      # MONGODB_CLUSTER_ADDRESS: cluster0.n4hxgy4.mongodb.net
      # MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      # MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
      # PORT: 8080
      
      #### - コンテナ上でjobを実行する場合の設定
      # MONGODB_CONNECTION_PROTOCOL: mongodb
      # # jobをコンテナ上で実行している場合、アドレスを指定する代わりにserviceコンテナの名前(ラベル)を指定して接続することができる。
      # MONGODB_CLUSTER_ADDRESS: mongodb
      # MONGODB_USERNAME: root
      # MONGODB_PASSWORD: example
      # PORT: 8080

      #### - ランナーでjobを実行する場合の設定
      MONGODB_CONNECTION_PROTOCOL: mongodb
      # serviceコンテナ側で設定した、ホストとコンテナのアクセスの設定に応じて、適切なアドレスを設定する。
      MONGODB_CLUSTER_ADDRESS: 127.0.0.1:27017
      MONGODB_USERNAME: root
      MONGODB_PASSWORD: example
      PORT: 8080




    # サービスコンテナの設定。
    ## このjob内で扱えるコンテナを定義することができる。
    ## このjobが、ランナーで動いていても、コンテナで動いていてもサービスコンテナを使うことができる。
    services:
      mongodb:
        image: mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
        # このjobが、ランナーで動いている場合は、ネットワークのマッピングが必要。※ このjobがコンテナ上で実行されている場合は、ネットワークの設定が不要。
        ports:
          - 27017:27017
    # 指定したcontainer内で実行されるが、今まで通りgithub actions上の文法を扱うことができる。
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |        
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"
